package o1.robots

/** The class `Spinbot` represents the "brains" (or AI) of extremely simple robots
  * that simply spin clockwise and never change location.
  * @param name  the name of the spinbot
  * @param body  the robot body whose actions the spinbot brain will control */
class Spinbot(name: String, body: RobotBody) extends RobotBrain(name, body) {

  /** Moves the robot. A spinbot simply spins 90 degrees clockwise as its move. */
  def moveBody() = {
    body.spinClockwise()
  }

}




package o1.robots

import o1._

// TODO: proper implementation missing completely
class Nosebot(name: String, body: RobotBody) extends RobotBrain(name, body) {

  def moveBody()={
    var truthVariable = mayMoveTowards(body.facing)
    var counter = 0
    while(!truthVariable && counter < 4) {
      body.spinClockwise()
      counter += 1
      truthVariable = mayMoveTowards(body.facing)

    }
      if(mayMoveTowards(body.facing)) body.moveTowards(facing)
  }

  override def mayMoveTowards(direction: o1.CompassDir): Boolean ={
    var square = body.neighboringSquare(direction)
    !(square.isUnpassable) && square.robot.isEmpty
  }

  def attemptMove(): Boolean ={
    if(mayMoveTowards(body.facing)){ body.moveTowards(facing)
      true
    }
    else{ body.spinClockwise()
      false
    }
  }

}



package o1.robots

import o1.CompassDir
import o1.grid.CompassDir.{East, North, South, West}

import scala.util.Random

// TODO: proper implementation missing completely
class Staggerbot(name: String, body: RobotBody, randomSeed: Int) extends RobotBrain(name, body) {
  private val generator = new Random(randomSeed)
  private val directions = Vector[CompassDir](North, East, South, West)

  def moveBody() = {
    if(body.isIntact){
    if(body.moveTowards(directions(generator.nextInt(4)))) body.spinTowards(directions(generator.nextInt(4)))
    }
  }


}



package o1.robots

import o1._
import scala.math._
import GridPos._

// TODO: proper implementation missing completely
class Lovebot(name: String, body: RobotBody, val beloved: RobotBody) extends RobotBrain(name, body) {

  private def belovedIsNeighbor: Boolean = {
    val neighbors = body.world.neighbors(body.location, false)
    neighbors.contains(beloved)
  }

  def moveBody() = {
    val xDistance = abs(this.body.location.xDiff(beloved.location))
    val yDistance = abs(this.body.location.yDiff(beloved.location))
    val distance = xDistance + yDistance
    if(distance != 1){
     if(xDistance >= yDistance) {
      this.body.moveTowards(this.body.location.xDirectionOf(beloved.location).get)
     }
     else{
      this.body.moveTowards(this.body.location.yDirectionOf(beloved.location).get)
     }

    }

  }
}



package o1.robots

import o1._
import o1.grid.CompassDir.{East, North, South, West}

// TODO: proper implementation missing completely
class Psychobot(name: String, body: RobotBody) extends RobotBrain(name, body) {

  private val directions = Vector[CompassDir](North, East, South, West)

  def moveBody() ={
    var northHasRobot = body.location.pathTowards(North).


   }
}






package o1.robots

import o1._


/** The class `RobotBrain` represents the "brains" (or artificial intelligence, AI) of virtual
  * robots that inhabit two dimensional grid worlds. A robot brain is equipped with an algorithm
  * for determining what a robot should do during its turn in a robot simulation. In other words,
  * a robot brain is capable of controlling the actions of a robot body.
  *
  * Concrete classes that extend this class need to provide implementations for the abstract
  * `moveBody` method; each such concrete class can represent a new kind of robot behavior.
  * Some subclasses are also expected to override the `mayMoveTowards` method.
  *
  * @param initialName  the name of the robot
  * @param body         the body the robot brain will control */
abstract class RobotBrain(initialName: String, val body: RobotBody) {

  private var nameIfAny: Option[String] = None
  this.name = initialName


  /** Changes the robot's name to the given one.
    *
    * Note to students: In Scala, a method whose name ends in an underscore and an
    * equals sign -- like this one's -- can be called using a special syntax.
    * For instance, this method can be called either with the statement `bot.name_=("Bob")`
    * or simply with an assignment statement: `bot.name = "Bob"`. You won't find many
    * uses for this in O1, but it's nice to know nonetheless. */
  def name_=(newName: String) = {
    this.nameIfAny = if (newName.trim.isEmpty) None else Some(newName)
  }


  /** Returns the name of the robot. If the robot's name has been set to the empty
    * string or contains only whitespace, returns `"Incognito"` instead. */
  def name = this.nameIfAny.getOrElse("Incognito")


  /** Returns the world that this robot is located in. */
  def world = this.body.world


  /** Returns the location of this robot in its robot world. */
  def location = this.body.location


  /** Returns the direction this robot is facing in. */
  def facing = this.body.facing


  /** Returns the coordinates that point at the square that is immediately in front
    * of this robot. */
  def locationInFront: grid.GridPos = {
    var direction = body.facing
    var coordinates = body.location
    if(direction == North) new GridPos(coordinates.x, coordinates.y - 1)
    else
    if(direction == East) new GridPos(coordinates.x + 1, coordinates.y)
    else
    if(direction == South) new GridPos(coordinates.x, coordinates.y + 1)
    else
    new GridPos(coordinates.x - 1, coordinates.y)

  }


  /** Returns the square that is immediately in front of this robot. */
  def squareInFront: Square = body.neighboringSquare(body.facing)


  /** Returns the brain of the robot immediately in front of this robot. The
    * brain is returned in an `Option` wrapper; `None` is returned if there
    * is no robot in that square or if the robot that is there has no brain. */
  def robotInFront: Option[RobotBrain] = if(this.squareInFront.robot.isDefined) this.squareInFront.robot.get.brain else None


  /** Controls the robot body’s actions for a single turn. If the brain considers
    * the robot to be stuck (see [[isStuck]]), this method does nothing. If not
    * stuck, the brain calls its own [[moveBody]] method, which carries out the
    * actual robot actions. */
  def controlTurn() = {
    if (!this.isStuck) {
      this.moveBody()
    }
  }


  /** Moves the robot: causes it to change its location, turn around, or whatever else the
    * robot does during its turn. What this means in practice depends on the type (subclass)
    * of the robot brain.
    *
    * `moveBody` is called by the brain’s [[controlTurn]] method every time the robot brain
    * gets a turn, unless the robot is stuck (as defined by [[isStuck]]).
    *
    * This method assumes that it is never called if the robot is broken or stuck. */
  def moveBody(): Unit


  /** Checks the the square that neighbors this robot in the given direction to see
    * if it contains something that the robot brain considers an obstacle. This method
    * is abstract; different kinds of robot brains will have different definitions of
    * what counts as an obstacle.
    *
    * This default implementation (which may be overriden by subclasses) does not
    * consider anything to be an obstacle. Robots that rely on this default implementation
    * are willing to move in any direction and never consider themselves to be stuck
    * (see [[isStuck]]). */
  def mayMoveTowards(direction: CompassDir) = true


  /** Determines whether or not the robot brain considers the robot to be stuck.
    * A brain considers the robot stuck if and only if all the squares surrounding the
    * robot contain unpassable obstacles, as defined by the [[mayMoveTowards]] method.
    * Only the four nearest squares in the main compass directions are considered. */
  def isStuck: Boolean = {
    var neighbors = body.world.neighbors(body.location, false)
    neighbors.count(_.isUnpassable) == 4 && !(mayMoveTowards(body.facing))
  }


  /** Moves the robot one square forwards, if there is nothing there. If that square
    * isn’t empty, the robot does ''not'' move, so this method never causes a collision.
    * @return `true` if the move was successful and the robot is now in the next square,
    *         `false` if it was blocked */
  def moveCarefully() = {
    if(this.squareInFront.isEmpty && world.elementAt(this.locationInFront) != Wall){
      body.moveTowards(body.facing)
      true
  }
    else
      false
  }

  /** Returns a textual representation of the robot (which is the robot's name). */
  override def toString = this.name


}




package o1.robots

import o1._



/** The class `RobotBody` represents virtual robots (or "bots") which inhabit two-dimensional
  * grid worlds. More specifically, each instance of the class represents a "robot body"
  * (or "chassis" or "hardware") and basic functionality of such a robot. Each "robot body"
  * is associated with a "robot brain" that controls the body and determines what functionality
  * is activated and when.
  *
  * A robot is equipped with the various capabilities:
  *
  * - It can sense its own surroundings (location, facing, the world that it is in).
  *
  * - It can spin around in any one of the four main compass directions.
  *
  * - It can move into the next square in a given direction.
  *
  * - It can sense whether it is broken or not, and whether it is "stuck" in a square between
  *   four walls.
  *
  * When a robot's `takeTurn` method is called, it uses its "brain" to figure out what to do
  * (move, turn about, etc.). Robots with different kinds of brains behave differently.
  *
  * @param world            the world inhabited by the robot
  * @param initialLocation  the initial location of the robot in its world
  * @param initialFacing    the direction the robot initially faces in
  *
  * @see [[RobotWorld]]
  * @see [[RobotBrain]] */
class RobotBody(val world: RobotWorld, initialLocation: GridPos, initialFacing: CompassDir) {

  /** the robot's brain (if it has one) */
  var brain: Option[RobotBrain] = None              // most-recent holder (it is possible for a robot to change brains (it will be, eventually, anyway))
  private var coordinates = initialLocation         // gatherer: changes in relation to the old location
  private var isBroken = false                      // flag: can be broken or intact
  private var facesTowards = initialFacing          // most-recent holder (can be changed arbitrarily)


  /** Returns the coordinates that indicate the robot's current location in the robot world. */
  def location = this.coordinates


  /** Returns the square the robot is currently in. */
  def locationSquare = this.world(this.location)


  /** Returns a square that neighbors the robot's current location in the given direction. */
  def neighboringSquare(direction: CompassDir): Square ={
    if(direction == North) world.elementAt(new GridPos(this.coordinates.x, this.coordinates.y - 1) )
    else
    if(direction == East) world.elementAt(new GridPos(this.coordinates.x + 1, this.coordinates.y))
    else
    if(direction == South) world.elementAt(new GridPos(this.coordinates.x, this.coordinates.y + 1))
    else
    world.elementAt(new GridPos(this.coordinates.x - 1, this.coordinates.y))

  }



  /** Returns the direction the robot is currently facing in. */
  def facing = this.facesTowards


  /** Turns the robot to face in the specified direction. */
  def spinTowards(newFacing: CompassDir) = {
    this.facesTowards = newFacing
  }


  /** Turns the robot 90 degrees clockwise. */
  def spinClockwise() = {
    if(facesTowards == North) facesTowards = East
    else
    if(facesTowards == East) facesTowards = South
    else
    if(facesTowards == South) facesTowards = West
    else
    if(facesTowards == West) facesTowards = North
  }


  /** Causes the robot to malfunction (typically as the result of a collision).
    * A broken robot does not do anything during its turns.
    * @see [[fix]] */
  def destroy() = {
    this.isBroken = true
  }


  /** Repairs a broken robot. The robot can now start taking its turns normally.
    * @see [[destroy]] */
  def fix() = {
    this.isBroken = false
  }


  /** Determines whether the robot is currently intact or not. A robot is intact
    * unless it has been broken with the `destroy` method and not fixed since. */
  def isIntact = !this.isBroken


  /** Relocates the robot within its current world to the square next to the robot's
    * current location, in the given direction. The direction does not necessarily have
    * to be the same one that the robot is originally facing in.
    *
    * This method turns the robot to face in the direction it moves in.
    *
    * Two robots can never be in the same square; neither can a robot and a wall. If the
    * robot's would-be location is not empty, a collision occurs instead and the robot
    * does not change locations (but still turns to face whatever it collided with).
    *
    * If the moving robot collides with a wall, the robot itself breaks. If a moving robot
    * collides with another robot, the other robot breaks and the moving robot stays intact.
    *
    * @return `true` if the robot successfully changed locations, `false` if it
    *         did not (even if it changed facing) */
  def moveTowards(direction: CompassDir) = {
    this.spinTowards(direction)
    val targetCoordinates = this.location.neighbor(direction)
    val targetSquare = this.world(targetCoordinates)
    val managedToMove = targetSquare.addRobot(this)
    if (managedToMove) {
      this.locationSquare.clear()
      this.coordinates = targetCoordinates
    }
    managedToMove
  }


  /** Gives the robot a turn to act.
    *
    * A broken robot does nothing during its turn; a brainless robot likewise does nothing.
    * An intact robot with a brain consults its brain to find out what to do with its turn.
    * It does that by calling the brain's `controlTurn` method.
    *
    * @see [[RobotBrain.controlTurn]] */
  def takeTurn() = if(this.isIntact && this.brain.isDefined) this.brain.get.controlTurn()


}

